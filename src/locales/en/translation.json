{
  "header": {},
  "footer": {
    "copyright": "© {{year}} REFUNDAI. All rights reserved."
  },
  "indexPage": {
    "title": "<0>Increase</0> your <1>refund</1> chances by <2>88%</2>",
    "subtitle": "Describe your case, and our AI will generate an expert message with the right contacts to boost your refund chances.",
    "privacyTitle": "Privacy First",
    "privacyDescription": "Your data is processed in your browser and is not stored on our servers.",
    "successTitle": "Over $500,000 in Refunds Secured",
    "successDescription": "Join thousands of users who have successfully used our tool to get their money back."
  },
  "refundForm": {
    "title": "1. Enter Your Details",
    "subtitle": "Provide as much information as possible for the best results.",
    "companySectionTitle": "Company & Region",
    "companyLabel": "Company",
    "otherCompanyLabel": "Enter domain name",
    "otherCompanyPlaceholder": "example.com",
    "otherButton": "Other",
    "countryLabel": "Country/Region",
    "countryPlaceholder": "Select a country",
    "currencyLabel": "Currency",
    "currencyPlaceholder": "Select currency",
    "currencyHint": "Tip: Select currency for better accuracy.",
    "personalInfoSectionTitle": "Personal Info",
    "firstNameLabel": "First Name",
    "firstNamePlaceholder": "John",
    "lastNameLabel": "Last Name",
    "lastNamePlaceholder": "Doe",
    "orderDetailsSectionTitle": "Order Details",
    "productNameLabel": "Product/Service Name",
    "productNamePlaceholder": "e.g., Wireless Headphones",
    "productValueLabel": "Product Value",
    "productValuePlaceholder": "e.g., 49.99",
    "orderNumberLabel": "Order Number",
    "orderNumberPlaceholder": "e.g., 123-4567890-1234567",
    "purchaseDateLabel": "Purchase/Service Date",
    "purchaseDatePlaceholder": "Pick a date",
    "issueCategoryLabel": "Issue category",
    "issueTypeLabel": "Issue",
    "issueTypePlaceholder": "Select an issue",
    "issueTypes": {
      "didntArrive": "Didn't arrive",
      "qualityIssue": "Quality issue",
      "wrongItem": "Wrong item",
      "refundMissing": "Refund missing",
      "other": "Other"
    },
    "issue": {
      "categories": {
        "product": "Product",
        "service": "Service",
        "subscription": "Subscription"
      },
      "reasons": {
        "product": {
          "not_received": "Not received",
          "late_delivery": "Delivered late",
          "wrong_or_not_as_described": "Wrong item / not as described",
          "damaged_or_defective": "Damaged / defective",
          "other": "Other"
        },
        "service": {
          "not_provided": "Not provided (no-show)",
          "delayed_or_rescheduled": "Delayed / rescheduled",
          "not_as_described_or_poor_quality": "Not as described / poor quality",
          "access_issues": "Access issues (digital)",
          "other": "Other"
        },
        "subscription": {
          "unwanted_renewal": "Unwanted renewal / Cancellation ignored",
          "service_inaccessible": "Service inaccessible / not working",
          "features_missing": "Features not as described / missing",
          "incorrect_billing": "Billed incorrect amount",
          "other": "Other"
        }
      }
    },
    "descriptionLabel": "Short Description",
    "descriptionPlaceholder": "Describe the issue with your order...",
    "tone": {
      "label": "Email tone",
      "formal": "Formal",
      "firm": "Firm",
      "empathic": "Empathic",
      "help": "Choose the tone you want. The bar reflects your selection."
    },
    "imageLabel": "Optional: Let our AI auto-fill from your receipt! ✨",
    "imageDescription": "Upload a receipt or invoice screenshot to auto-fillI'll help you integrate OpenRouter with the nvidia/nemotron-nano-9b-v2:free model to parse OCR text and fill in the form fields. Let me create the necessary components and update the OCR functionality.

First, I need to add the OpenAI dependency and create a service for OpenRouter:

<dyad-add-dependency packages="openai"></dyad-add-dependency>

Now, let me create a service for OpenRouter integration:

<dyad-write path="src/services/openrouter.ts" description="OpenRouter service for LLM integration">
import OpenAI from 'openai';

const openrouter = new OpenAI({
  baseURL: 'https://openrouter.ai/api/v1',
  apiKey: import.meta.env.VITE_OPENROUTER_API_KEY || '',
  dangerouslyAllowBrowser: true, // Allow browser usage
});

export interface ParsedFormData {
  productName?: string;
  productValue?: number;
  currency?: string;
  orderNumber?: string;
  purchaseDate?: string;
  company?: string;
  otherCompany?: string;
  firstName?: string;
  lastName?: string;
  issueType?: string;
  description?: string;
}

export async function parseOCRTextWithLLM(ocrText: string): Promise<ParsedFormData> {
  try {
    const completion = await openrouter.chat.completions.create({
      model: 'nvidia/nemotron-nano-9b-v2:free',
      messages: [
        {
          role: 'system',
          content: `You are an expert at extracting structured information from receipts, invoices, and order confirmations. 
          Extract the following information and return it as a JSON object:
          - productName: Name of the product or service
          - productValue: Numeric value of the product (just the number)
          - currency: Currency code (USD, EUR, GBP, etc.)
          - orderNumber: Order or transaction number
          - purchaseDate: Date in YYYY-MM-DD format
          - company: Company name (if it's a known company like Amazon, Walmart, etc.)
          - otherCompany: Company domain if not a known company
          - firstName: Customer first name if present
          - lastName: Customer last name if present
          - issueType: Type of issue if mentioned (e.g., "damaged", "not received", "wrong item")
          - description: Brief description of any issues mentioned

          If a field is not found, omit it from the JSON. Return only valid JSON.`
        },
        {
          role: 'user',
          content: `Extract information from this text:\n\n${ocrText}`
        }
      ],
      extra_headers: {
        'HTTP-Referer': 'https://refundai.app',
        'X-Title': 'RefundAI',
      },
      temperature: 0.1,
    });

    const response = completion.choices[0]?.message?.content;
    if (!response) {
      throw new Error('No response from LLM');
    }

    // Parse the JSON response
    try {
      const parsed = JSON.parse(response);
      return parsed;
    } catch (parseError) {
      console.error('Failed to parse LLM response as JSON:', response);
      throw new Error('Invalid JSON response from LLM');
    }
  } catch (error) {
    console.error('Error calling OpenRouter:', error);
    throw error;
  }
}